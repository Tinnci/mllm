name: "Manual Build"

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: '编译类型'
        required: true
        default: 'cpu'
        type: choice
        options:
          - cpu
          - qnn
          - xnnpack
          - jni
          - all
      debug_mode:
        description: '是否启用调试模式'
        required: true
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'
      enable_test:
        description: '是否启用测试'
        required: true
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'
      enable_qnn:
        description: 'JNI库是否启用QNN'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'

permissions:
  contents: read

jobs:
  build-cpu:
    if: ${{ github.event.inputs.build_type == 'cpu' || github.event.inputs.build_type == 'all' }}
    name: Build CPU Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          submodules: true
          
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: Install Python Development Dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install numpy==1.26.4 \
                               protobuf==3.19.6 \
                               packaging==24.0 \
                               PyYAML==5.3 \
                               six==1.16.0 \
                               typing-extensions==4.10.0 \
                               matplotlib==3.3.4 \
                               opencv-python==4.5.4.58 \
                               Pillow==10.2.0 \
                               pybind11==2.11.1 \
                               pytest==8.0.0 \
                               pybind11-stubgen==2.5
          
      - name: Cache Build
        uses: actions/cache@v3
        with:
          path: |
            build
            build-arm
          key: ${{ runner.os }}-build-${{ hashFiles('**/*.cpp', '**/*.h', '**/*.hpp', 'CMakeLists.txt') }}
          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential ninja-build clang-14
          
      - name: Build
        run: |
          cd scripts
          bash build.sh
        env:
          DEBUG: ${{ inputs.debug_mode == 'true' }}
          TEST: ${{ inputs.enable_test == 'true' }}
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mllm-cpu-build
          path: bin/
          
  build-qnn:
    if: ${{ github.event.inputs.build_type == 'qnn' || github.event.inputs.build_type == 'all' }}
    name: Build QNN Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          submodules: true
          
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: Install Python Development Dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install numpy==1.26.4 \
                               protobuf==3.19.6 \
                               packaging==24.0 \
                               PyYAML==5.3 \
                               six==1.16.0 \
                               typing-extensions==4.10.0 \
                               matplotlib==3.3.4 \
                               opencv-python==4.5.4.58 \
                               Pillow==10.2.0 \
                               pybind11==2.11.1 \
                               pytest==8.0.0 \
                               pybind11-stubgen==2.5
          
      - name: Cache Build
        uses: actions/cache@v3
        with:
          path: |
            build-arm-qnn
          key: ${{ runner.os }}-build-qnn-${{ hashFiles('**/*.cpp', '**/*.h', '**/*.hpp', 'CMakeLists.txt') }}
          
      - name: Setup Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26

      - name: Set Android NDK Environment
        run: |
          echo "ANDROID_NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo "ANDROID_NDK=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential ninja-build clang-14
          
      - name: Install System Dependencies
        run: |
          sudo apt-get update || {
            echo "更新包管理器失败"
            exit 1
          }
          
          sudo apt-get install -y \
            clang-14 \
            libc++-dev \
            libncurses6 \
            libncurses-dev \
            flatbuffers-compiler \
            libflatbuffers-dev \
            ninja-build \
            cmake \
            build-essential || {
              echo "安装系统依赖失败"
              exit 1
            }
          
          # 为了兼容性创建libncurses5的软链接
          if [ ! -f "/usr/lib/x86_64-linux-gnu/libncurses.so.5" ]; then
            sudo ln -s /usr/lib/x86_64-linux-gnu/libncurses.so.6 /usr/lib/x86_64-linux-gnu/libncurses.so.5 || {
              echo "创建libncurses软链接失败"
              exit 1
            }
          fi
          
          # 验证系统依赖
          echo "验证系统依赖..."
          dpkg -l | grep -E "clang-14|libc\+\+|libncurses|flatbuffers"
          
          # 检查编译器和工具版本
          echo "=== 工具版本信息 ==="
          cmake --version || exit 1
          ninja --version || exit 1
          flatc --version || exit 1
          echo "编译器版本信息："
          clang++ --version || exit 1
          gcc --version || exit 1
          
          # 验证所有必需的库文件存在
          echo "=== 验证库文件 ==="
          for lib in libncurses.so.6; do
            if ! ldconfig -p | grep -q $lib; then
              echo "错误：找不到 $lib"
              exit 1
            fi
          done
          
          echo "所有依赖安装和验证完成"
          
      - name: Install Python Dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install numpy==1.26.4 \
                               protobuf==3.19.6 \
                               packaging==24.0 \
                               PyYAML==5.3 \
                               six==1.16.0 \
                               typing-extensions==4.10.0 \
                               matplotlib==3.3.4 \
                               opencv-python==4.5.4.58 \
                               Pillow==10.2.0
          
      - name: Download QNN SDK
        run: |
          # 创建正确的目标目录
          mkdir -p ${{ github.workspace }}/src/backends/qnn/sdk
          cd ${{ github.workspace }}/src/backends/qnn/sdk
          
          # 下载QNN SDK
          echo "正在下载QNN SDK..."
          curl -L -o qnn_sdk.zip \
               "https://apigwx-aws.qualcomm.com/qsc/public/v1/api/download/software/tool/qualcomm_neural_processing_sdk_public/2.27.0.240926/Linux/qualcomm_neural_processing_sdk_public.Core.2.27.0.240926.Linux-AnyCPU.zip"
          
          # 解压SDK并确保正确的目录结构
          unzip -q qnn_sdk.zip
          cp -r qairt/2.27.0.240926/* .
          rm -rf qairt qnn_sdk.zip
          
          # 验证关键目录存在
          if [ ! -d "lib" ] || [ ! -d "include" ] || [ ! -d "bin" ]; then
            echo "错误：QNN SDK目录结构不完整"
            ls -la
            exit 1
          fi
          
          # 验证Android特定目录
          if [ ! -d "lib/aarch64-android" ]; then
            echo "错误：缺少Android ARM64库文件"
            exit 1
          fi
          
          # 设置QNN环境变量
          {
            echo "QNN_SDK_ROOT=${{ github.workspace }}/src/backends/qnn/sdk"
            echo "PYTHONPATH=${{ github.workspace }}/src/backends/qnn/sdk/lib/python:$PYTHONPATH"
            echo "LD_LIBRARY_PATH=${{ github.workspace }}/src/backends/qnn/sdk/lib/x86_64-linux-clang:$LD_LIBRARY_PATH"
            echo "PATH=${{ github.workspace }}/src/backends/qnn/sdk/bin/x86_64-linux-clang:$PATH"
            
            # Android特定配置
            echo "ANDROID_NDK=$ANDROID_NDK_ROOT"
            echo "QNN_ANDROID_BUILD=1"
            echo "QNN_TARGET_ARCH=aarch64-android"
            echo "QNN_ENABLE_HTP=1"
            echo "QNN_ENABLE_GPU=1"
            echo "QNN_ENABLE_CPU=1"
            
            # 设置编译器路径
            echo "CC=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
            echo "CXX=$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++"
          } >> $GITHUB_ENV
          
          # 运行环境设置脚本
          source ${{ github.workspace }}/src/backends/qnn/sdk/bin/envsetup.sh
          
          # 检查环境设置
          ${{ github.workspace }}/src/backends/qnn/sdk/bin/envcheck -n
          
          # 验证Android工具链
          if [ ! -f "$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" ]; then
            echo "错误：Android NDK工具链未正确设置"
            exit 1
          fi
          
          # 显示配置信息
          echo "=== QNN SDK配置信息 ==="
          echo "QNN_SDK_ROOT: $QNN_SDK_ROOT"
          echo "ANDROID_NDK: $ANDROID_NDK_ROOT"
          echo "QNN_TARGET_ARCH: aarch64-android"
          echo "启用的后端: CPU, GPU, HTP"
          
      - name: Build
        run: |
          # 验证 QNN SDK 目录结构
          if [ ! -d "${{ github.workspace }}/src/backends/qnn/sdk" ]; then
            echo "错误：QNN SDK 目录不存在"
            exit 1
          fi
          
          # 设置 QNN 环境变量
          export QNN_SDK_ROOT="${{ github.workspace }}/src/backends/qnn/sdk"
          export QNN_TARGET_ARCH="aarch64-android"
          export QNN_ENABLE_HTP=1
          export QNN_ENABLE_GPU=1
          export QNN_ENABLE_CPU=1
          
          # 验证 Android NDK 工具链
          if [ ! -f "$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake" ]; then
            echo "错误：找不到 Android 工具链文件"
            ls -la $ANDROID_NDK_ROOT/build/cmake/
            exit 1
          fi
          
          cd scripts
          bash build_android_qnn.sh
          
          # 验证编译输出
          cd ../build-arm-qnn
          if [ ! -f "demo_qwen_npu" ] && [ ! -f "main_qwen_npu" ]; then
            echo "错误：QNN 目标编译失败，未找到期望的输出文件"
            ls -la
            exit 1
          fi
          
          # 创建输出目录并复制文件
          mkdir -p ../bin-arm
          cp demo_qwen_npu main_qwen_npu ../bin-arm/ 2>/dev/null || :
          
          # 运行开发工作流
          if [ "${{ inputs.debug_mode }}" == "true" ]; then
            python3 workflow_dev.py --dev
          fi
          
          # 运行测试
          if [ "${{ inputs.enable_test }}" == "true" ]; then
            python3 workflow_dev.py --test "python,c++"
          fi
        env:
          DEBUG: ${{ inputs.debug_mode == 'true' }}
          TEST: ${{ inputs.enable_test == 'true' }}
          # QNN特定环境变量
          QNN_SDK_ROOT: ${{ github.workspace }}/src/backends/qnn/sdk
          ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
          QNN_TARGET_ARCH: aarch64-android
          QNN_ANDROID_BUILD: 1
          QNN_ENABLE_HTP: 1
          QNN_ENABLE_GPU: 1
          QNN_ENABLE_CPU: 1
          # Python开发环境变量
          PYTHONPATH: ${{ github.workspace }}/python/top:${{ github.workspace }}/python/src/_C:${PYTHONPATH}
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mllm-qnn-build
          path: bin-arm/
          if-no-files-found: warn
          
  build-xnnpack:
    if: ${{ github.event.inputs.build_type == 'xnnpack' || github.event.inputs.build_type == 'all' }}
    name: Build XNNPACK Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          submodules: true
          
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: Install Python Development Dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install numpy==1.26.4 \
                               protobuf==3.19.6 \
                               packaging==24.0 \
                               PyYAML==5.3 \
                               six==1.16.0 \
                               typing-extensions==4.10.0 \
                               matplotlib==3.3.4 \
                               opencv-python==4.5.4.58 \
                               Pillow==10.2.0 \
                               pybind11==2.11.1 \
                               pytest==8.0.0 \
                               pybind11-stubgen==2.5
          
      - name: Cache Build
        uses: actions/cache@v3
        with:
          path: |
            build-arm-xp
          key: ${{ runner.os }}-build-xnnpack-${{ hashFiles('**/*.cpp', '**/*.h', '**/*.hpp', 'CMakeLists.txt') }}
          
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26
          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential ninja-build clang-14
          
      - name: Build
        run: |
          cd scripts
          bash build_android_xp.sh
        env:
          DEBUG: ${{ inputs.debug_mode == 'true' }}
          TEST: ${{ inputs.enable_test == 'true' }}
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mllm-xnnpack-build
          path: bin-arm/
          if-no-files-found: warn
          
  build-android-jni:
    if: ${{ github.event.inputs.build_type == 'jni' || github.event.inputs.build_type == 'all' }}
    name: Build Android JNI Library
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          submodules: true
          
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: Install Python Development Dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install numpy==1.26.4 \
                               protobuf==3.19.6 \
                               packaging==24.0 \
                               PyYAML==5.3 \
                               six==1.16.0 \
                               typing-extensions==4.10.0 \
                               matplotlib==3.3.4 \
                               opencv-python==4.5.4.58 \
                               Pillow==10.2.0
          
      - name: Cache Build
        uses: actions/cache@v3
        with:
          path: |
            build-arm-app
          key: ${{ runner.os }}-build-jni-${{ hashFiles('**/*.cpp', '**/*.h', '**/*.hpp', 'CMakeLists.txt') }}
          
      - name: Setup Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26

      - name: Set Android NDK Environment
        run: |
          echo "ANDROID_NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo "ANDROID_NDK=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential ninja-build clang-14
          
      - name: Download QNN SDK
        if: ${{ inputs.enable_qnn == 'true' }}
        run: |
          mkdir -p ${{ github.workspace }}/src/backends/qnn/sdk
          cd ${{ github.workspace }}/src/backends/qnn/sdk
          
          curl -L -o qnn_sdk.zip \
               "https://apigwx-aws.qualcomm.com/qsc/public/v1/api/download/software/tool/qualcomm_neural_processing_sdk_public/2.27.0.240926/Linux/qualcomm_neural_processing_sdk_public.Core.2.27.0.240926.Linux-AnyCPU.zip"
          
          unzip -q qnn_sdk.zip
          cp -r qairt/2.27.0.240926/* .
          rm -rf qairt qnn_sdk.zip
          
          if [ ! -d "lib/aarch64-android" ]; then
            echo "错误：缺少Android ARM64库文件"
            exit 1
          fi
          
      - name: Build JNI Library
        run: |
          mkdir -p build-arm-app
          cd build-arm-app
          
          cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DANDROID_ABI="arm64-v8a" \
          -DANDROID_NATIVE_API_LEVEL=android-28 \
          -DNATIVE_LIBRARY_OUTPUT=. \
          -DNATIVE_INCLUDE_OUTPUT=. \
          -DARM=ON \
          -DAPK=ON \
          -DQNN=${{ inputs.enable_qnn == 'true' }} \
          -DDEBUG=OFF \
          -DTEST=OFF \
          -DQUANT=OFF \
          -DQNN_VALIDATE_NODE=${{ inputs.enable_qnn == 'true' }} \
          -DMLLM_BUILD_XNNPACK_BACKEND=OFF
          
          make mllm_lib -j$(nproc)
          
          # 验证构建输出
          if [ ! -f "libmllm_lib.a" ]; then
            echo "错误：JNI 库构建失败"
            exit 1
          fi
        env:
          QNN_SDK_ROOT: ${{ github.workspace }}/src/backends/qnn/sdk
          ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
          
      - name: Upload JNI Library
        uses: actions/upload-artifact@v4
        with:
          name: mllm-android-jni
          path: build-arm-app/libmllm_lib.a
          if-no-files-found: error 